akka {

  # Loggers to register at boot time (akka.event.Logging$DefaultLogger logs
  # to STDOUT)
  loggers = ["akka.event.Logging$DefaultLogger"]
 
  # Log level used by the configured loggers (see "loggers") as soon
  # as they have been started; before that, see "stdout-loglevel"
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "INDO"
 
  # Log level for the very basic logger activated during ActorSystem startup.
  # This logger prints the log messages to stdout (System.out).
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  stdout-loglevel = "INFO"
 
  actor {
    provider = "cluster"
 
    default-dispatcher {
      # Throughput for default Dispatcher, set to 1 for as fair as possible
      throughput = 10
    }
  }
  
  remote {
    # The port clients should connect to. Default is 2552.
    netty.tcp {
    	port = 2551
    	hostname = "127.0.0.1"
    }
  }
    
  cluster {
    seed-nodes = ["akka.tcp://ShardingSystem@127.0.0.1:2552", "akka.tcp://ShardingSystem@127.0.0.1:2553"]
 
    failure-detector.heartbeat-interval = 1 s
    auto-down-unreachable-after = 5s
  }
  
  persistence {
    journal.plugin = "akka.persistence.journal.leveldb-shared"
    journal.leveldb-shared.store {
      native = off
      dir = "/Users/davidthomas/Dev/tmp/shared-journal-1"
    }
    #snapshot-store.local.dir = "/Users/davidthomas/Dev/tmp/snapshots"
    #journal.plugin = "akka.persistence.journal.leveldb"
    #journal.leveldb {
    #  native = off
    #  dir = "target/journal"
    #}
    #snapshot-store.local.dir = "target/snapshots"
  }
  
  cluster.sharding {
    # The extension creates a top level actor with this name in top level user scope,
    # e.g. '/user/sharding'
    guardian-name = sharding
    # If the coordinator can't store state changes it will be stopped
    # and started again after this duration.
    coordinator-failure-backoff = 10 s
    # Start the coordinator singleton manager on members tagged with this role.
    # All members are used if undefined or empty.
    # ShardRegion actor is started in proxy only mode on nodes that are not tagged
    # with this role.
    role = ""
    # The ShardRegion retries registration and shard location requests to the 
    # ShardCoordinator with this interval if it does not reply.
    retry-interval = 2 s
    # Maximum number of messages that are buffered by a ShardRegion actor.
    buffer-size = 100000
    # Timeout of the shard rebalancing process.
    handoff-timeout = 60 s
    # Time given to a region to acknowdge it's hosting a shard.
    shard-start-timeout = 10 s
    # If the shard can't store state changes it will retry the action
    # again after this duration. Any messages sent to an affected entry
    # will be buffered until the state change is processed
    shard-failure-backoff = 10 s
    # If the shard is remembering entries and an entry stops itself without
    # using passivate. The entry will be restarted after this duration or when
    # the next message for it is received, which ever occurs first.
    entry-restart-backoff = 10 s
    # Rebalance check is performed periodically with this interval.
    rebalance-interval = 5 s
    # How often the coordinator saves persistent snapshots, which are
    # used to reduce recovery times
    snapshot-interval = 3600 s
    # Setting for the default shard allocation strategy
    least-shard-allocation-strategy {
      # Threshold of how large the difference between most and least number of
      # allocated shards must be to begin the rebalancing.
      rebalance-threshold = 1
      # The number of ongoing rebalancing processes is limited to this number.
      max-simultaneous-rebalance = 3

    }
    coordinator-singleton = ${akka.cluster.singleton}
  }

  cluster.singleton {
    # The actor name of the child singleton actor.
    singleton-name = "singleton"

    # Singleton among the nodes tagged with specified role.
    # If the role is not specified it's a singleton among all nodes in the cluster.
    role = ""

    # When a node is becoming oldest it sends hand-over request to previous oldest,
    # that might be leaving the cluster. This is retried with this interval until
    # the previous oldest confirms that the hand over has started or the previous
    # oldest member is removed from the cluster (+ akka.cluster.down-removal-margin).
    hand-over-retry-interval = 1s

    # The number of retries are derived from hand-over-retry-interval and
    # akka.cluster.down-removal-margin (or ClusterSingletonManagerSettings.removalMargin),
    # but it will never be less than this property.
    min-number-of-hand-over-retries = 10
  }
  
  log-dead-letters = 100
  log-dead-letters-during-shutdown = on
  jvm-exit-on-fatal-error = off
 
  #extensions = ["akka.contrib.pattern.ClusterReceptionistExtension", "akka.contrib.pattern.DistributedPubSubExtension", "akka.contrib.pattern.ClusterSharding"]
}